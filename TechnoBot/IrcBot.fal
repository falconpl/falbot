
load IrcClient
//test = IrcClient("irc.freenode.net", 6667, "TechnoBot", "Techno's Bot", "Freenode Bot")
//test2 = IrcClient("irc.entirelyrandom.net", 6667, "TechnoBot", "Techno's Bot", "EntirelyRandom Bot")
//local = IrcClient("localhost", 6667, "TechnoBot", "Techno's Bot", "Local Bot")
//test.connect()
//test.send("JOIN #falcon")
//test2.connect()
//test2.send("JOIN #chat")
//local.connect()
//local.send("JOIN #test")

load compiler

host = nil
channel = nil
port = 6667
usage = "test.fal -h hostname -c channel [-p port]\n" +
         "optionally -h can be --host\n" +
         "           -c can be --channel\n" +
         "           -p can be --port\n"

cmd = cmdP()
cmd.parse()

if (host == nil) or (channel == nil)
    > "You must give a host and channel"
    > usage
    exit(1)
end

comp = ICompiler()



test = IrcClient(host, port, "FalBot", "Falcon Bot", "FalBot")

test.connect()
test.join(@"$channel")



class cmdP from CmdlineParser
    
    function onOption( option )
        switch option
            case "h", "host", "p", "port", "c", "channel"
                self.expectValue()
            default
                > usage
                exit(1)
        end
    end
   
    function onValue( option, value)
        global host, port, channel
        switch option
            case "h", "host"
                > "host: " + value
                host = value
            case "p", "port"
                > "port: " + value
                port = value
            case "c", "channel"
                > "channel: " + value
                channel = value
        end
    end
   
end

class IrcBot(nHost, nPort, nNick, nName, nBotName, logFile)
    ircClient = nil
    handlerTable = nil
    init
        ircClient = IrcClient(nHost, nPort, nName, nBotName, logFile)
        handlerTable = Table(["type", "filter", "handler"])
        subscribe("IrcMessage", self.onMessage)
        subscribe("IrcNoticeMessage", self.onNoticeMessage)
        subscribe("IrcPingMessage", self.onPingMessage)
        subscribe("IrcJoinMessage", self.onJoinMessage)
        subscribe("IrcPartMessage", self.onPartMessage)
        subscribe("IrcPrivateMessage", self.onPrivateMessage)
        subscribe("IrcNumericMessage", self.onNumericMessage)
    end
    
    function connect()
        ircClient.connect()
    end
    
    function subscribeMessageHandler(type, filter, handler)
        handlerTable.insert([type, filter, handler])
    end
    
    function onMessage(message)
       
    end
    
    function onPingMessage(message)
    end
    function onJoinMessage(message)
    end
    function onPartMessage(message)
    end
    function onPrivateMessage(message)
    end
    function onNumericMessage(message)
    end
    function onQuitMessage(message)
    end
    function onErrorMessage(message)
    end
    function onModeMessage(message)
    end
    
end 