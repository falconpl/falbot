load IrcClient
load compiler

host = nil
channel = nil
port = 6667
usage = "test.fal -h hostname -c channel [-p port]\n" +
         "optionally -h can be --host\n" +
         "           -c can be --channel\n" +
         "           -p can be --port\n"

cmd = cmdP()
cmd.parse()

if (host == nil) or (channel == nil)
    > "You must give a host and channel"
    > usage
    exit(1)
end

comp = Compiler()



test = IrcClient(host, port, "FalBot", "Falcon Bot", "FalBot")

test.connect()
test.send(@"JOIN $channel")

subscribe("IrcPrivateMessage", privMessageHandler)
subscribe("IrcNoticeMessage", messageHandler)
subscribe("IrcMessage", messageHandler)

evalCommand = Regex( "!eval (.*)", "i")

function messageHandler(message)
    > message
end


function privMessageHandler(message)
    > message
    if message.channel == channel
        said = message.said.lower()
        if (said.find("falbot") >= 0) and (message.nick == "OmniMancer")
            if said.find("quit") >= 0
                message.client.quit()
                exit(0)
            end
        elif evalCommand.match(message.said)
            try
                evalMod = comp.compile("IrcEval", message.said[evalCommand.captured(1)])
                ircStream = StringStream()
                oldStdOut = stdOut(ircStream)
                > "Result: " +  evalMod.get("__main__")()
                stdOut(oldStdOut)
                ircOut = ircStream.closeToString()
                ircOut.replace("\n\r", "\n")
                ircOut.replace("\r", "\n")
                for line in ircOut.split("\n")
                    message.client.sendTo(message.channel, line)
                end
            catch CodeError in e
                message.client.sendTo(message.channel, toString(e))
            end
        end
    end
end

class cmdP from CmdlineParser
    
    function onOption( option )
        switch option
            case "h", "host", "p", "port", "c", "channel"
                self.expectValue()
            default
                > usage
                exit(1)
        end
    end
   
    function onValue( option, value)
        global host, port, channel
        switch option
            case "h", "host"
                > "host: " + value
                host = value
            case "p", "port"
                > "port: " + value
                port = value
            case "c", "channel"
                > "channel: " + value
                channel = value
        end
    end
   
end