load IrcClient
load compiler

host = nil
channel = nil
port = 6667
usage = "test.fal -h hostname -c channel [-p port]\n" +
         "optionally -h can be --host\n" +
         "           -c can be --channel\n" +
         "           -p can be --port\n"

cmd = cmdP()
cmd.parse()

if (host == nil) or (channel == nil)
    > "You must give a host and channel"
    > usage
    exit(1)
end


test = IrcClient(host, port, "FalBot", "Falcon Bot", "FalBot")

test.connect()
test.send(@"JOIN $channel")

subscribe("IrcPrivateMessage", privMessageHandler)
subscribe("IrcNoticeMessage", messageHandler)
subscribe("IrcMessage", messageHandler)

evalCommand = Regex( "^!eval (.*)$", "i")

function messageHandler(message)
    > message
end

function IrcEval(string, message, reset)
    static
        evalString = ""
        comp = ICompiler()
    end
    if (evalString == "")
        evalString = string
    elif reset
        evalString = ""
        comp.reset()
    else
        evalString += string
    end
    try
        evalStream = StringStream()
        comp.stdOut = evalStream
        comp.stdErr = evalStream
        evalStream.writeString( "Compiling: " + string + "\n")
        status = comp.compileNext("IrcEval", evalString)
        
        
        if status == comp.NOTHING
            evalStream.writeString( "No action performed." )
        
        elif status == comp.MORE
            evalStream.writeString( "More input required." )
        
        elif status == comp.INCOMPLETE
            evalStream.writeString( "Incomplete Statement, more input required." )
        
        elif status == comp.DECL
            evalStream.writeString( "Declaration compiled." )
        
        elif status == comp.STATEMENT
            evalStream.writeString( "Statement compiled and executed." )
        
        elif status == comp.EXPRESSION
            evalStream.writeString( "Expression compiled and executed." )
            evalStream.writeString( "Result: " + comp.result + "\n" ) 
        
        elif status == comp.CALL
            evalStream.writeString( "Call compiled and evaluated" )
            if comp.result != nil
                evalStream.writeString( "Result: " + comp.result + "\n" ) 
            end
        end
         
        ircOut = evalStream.closeToString()
        ircOut.replace( "\n\r", "\n")
        ircOut.replace( "\r", "\n")
        for line in ircOut.split( "\n" )
            message.client.sendTo(message.channel, line)
        end
        
    catch CodeError in e
        for err in e.subErrors
            message.client.sendTo(message.channel, toString(err))
        end
    catch Error in e
        message.client.sendTo(message.channel, toString(e))
    end
end
    
function privMessageHandler(message)
    > message
    if message.channel == channel
        said = message.said.lower()
        if (said.find("falbot") >= 0) and (message.nick == "OmniMancer")
            if said.find("quit") >= 0
                message.client.quit( "OmniMancer told me to!")
                exit(0)
            end
        elif evalCommand.match(message.said)
            codeSnippet = message.said[evalCommand.captured(1)]
            reset = codeSnippet.lower() == "*reset*" ? true : false  
            IrcEval(codeSnippet, message, reset)
        end
    end
end

class cmdP from CmdlineParser
    
    function onOption( option )
        switch option
            case "h", "host", "p", "port", "c", "channel"
                self.expectValue()
            default
                > usage
                exit(1)
        end
    end
   
    function onValue( option, value)
        global host, port, channel
        switch option
            case "h", "host"
                > "host: " + value
                host = value
            case "p", "port"
                > "port: " + value
                port = value
            case "c", "channel"
                > "channel: " + value
                channel = value
        end
    end
   
end