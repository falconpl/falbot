// Falcon Modules
load socket
load regex

// FalconLogger Modules
load CommandLine


// Export
export IrcClient

/* Parts of this file are from the ircclient.fal from the simple IRC bot 
 * Used with kind permission form the author, Jeremy Cowgar(jeremy_c), perhaps this file will replace that one soon.
 * The message objects and message matcher were what was taken mainly.
 * Paul Davey, TechnoMancer
 */

// Copy begins here from ircclient.fal

class IrcMessage( raw, nRe, nClient )
    rawMessage = raw
    re = nRe
    client = nClient
   
    function name()
        return self.className()
    end
    
    function match(pattern)
        match = true
        if pattern.rawMessage
            match = (self.rawMessage == pattern.rawMessage) and match
        end
        if pattern.client
            match = (self.client == pattern.client) and match
        end
        return match
    end
    
    function toString()
        return @ "<IrcMessage> raw: \"$self.rawMessage\""
    end
end

/*
 * NOTICE AUTH :*** Checking ident
 * NOTICE falbot :*** Your host is simmons.freenode.net[simmons.freenode.net/6667], running version hyperion-1.0.2b
 */
 
class IrcNoticeMessage( raw, re, client ) from IrcMessage( raw, re, client )
    toWho   = nil
    message = nil
    
    init
        self.toWho   = self.rawMessage[ self.re.captured( 1 ) ]
        self.message = self.rawMessage[ self.re.captured( 2 ) ]
    end
    
    function match(pattern)
        match = self.IrcMessage.match(pattern) and true
        if pattern.toWho
            match = (self.toWho == pattern.toWho) and match
        end
        if pattern.message
            match = (self.message == pattern.message) and match
        end
        return match
    end
   
    function toString()
        return @ "<Notice Message> to: \"$self.toWho\" message: \"$self.message\""
    end
end

/*
 * PING :simmons.freenode.net
 */
 
class IrcPingMessage( raw, re, client ) from IrcMessage( raw, re, client )
    pingFrom = nil
    
    init
        self.pingFrom = strSplit( self.rawMessage[ self.re.captured( 1 ) ], "," )
    end
    
    function match(pattern)
        match = self.IrcMessage.match(pattern)
        if pattern.pingFrom
            match = (self.pingFrom == pattern.pingFrom) and match
        end
        return match
    end
    
    function toString()
        f = strMerge( self.pingFrom, " and " )
        return @"<Ping Message> from: $f"
    end
end

/*
 * :jeremy_c!n=jeremy_c@cpe-71-74-145-210.neo.res.rr.com JOIN :#falconpl
 */
 
class IrcJoinMessage( raw, re, client ) from IrcMessage( raw, re, client )
    nick    = nil
    channel = nil
    
    init
        self.nick    = self.rawMessage[ self.re.captured( 1 ) ]
        self.channel = self.rawMessage[ self.re.captured( 2 ) ]
    end
    
    function toString()
        return @"<Join Message> $self.nick JOINED $self.channel"
    end
end

/*
 * :jeremy_c!n=jeremy@cpe-71-74-145-210.neo.res.rr.com PRIVMSG #johndoey :hello.
 */
 
class IrcPrivateMessage( raw, re, client ) from IrcMessage( raw, re, client )
    nick    = nil
    host    = nil
    channel = nil
    said    = nil
    
    init
        self.nick    = self.rawMessage[ self.re.captured( 1 ) ]
        self.host    = self.rawMessage[ self.re.captured( 2 ) ]
        self.channel = self.rawMessage[ self.re.captured( 3 ) ]
        self.said    = self.rawMessage[ self.re.captured( 4 ) ]
    end
   
    function toString()
        return @"<Private Message> $self.nick ($self.host) ON $self.channel SAID $self.said"
    end
end

/*
 * :jeremy_c!n=jeremy@cpe-71-74-145-210.neo.res.rr.com PART #johndoey :"Leaving"
 */
 
class IrcPartMessage( raw, re, client ) from IrcMessage( raw, re, client )
    nick    = nil
    host    = nil
    channel = nil
    message = nil

    init
        self.nick    = self.rawMessage[ self.re.captured( 1 ) ]
        self.host    = self.rawMessage[ self.re.captured( 2 ) ]
        self.channel = self.rawMessage[ self.re.captured( 3 ) ]
        self.message = self.rawMessage[ self.re.captured( 4 ) ]
    end

    function toString()
        return @ "<Part Message> $self.nick PARTED FROM $self.channel SAYING $self.message"
    end
end

//Copy ends here from ircclient.fal

class IrcNumericMessage(raw, re, client) from IrcMessage(raw, re, client)
    host = nil
    code = nil
    nick = nil
    message = nil
    
    init
        self.host =      self.rawMessage[ self.re.captured( 1 ) ]
        self.code = int( self.rawMessage[ self.re.captured( 2 ) ] )
        self.nick =      self.rawMessage[ self.re.captured( 3 ) ]
        self.message =   self.rawMessage[ self.re.captured( 4 ) ]
    end
    
    function match(pattern)
        match = self.IrcMessage.match(pattern)
        if pattern.host
            match = (self.host == pattern.host) and match
        end
        if pattern.code
            match = (self.code == pattern.code) and match
        end
        if pattern.nick
            match = (self.nick == pattern.nick) and match
        end
        if pattern.message
            match = (self.message == pattern.message) and match
        end
        return match
    end
    
    function toString()
        return @ "<Numeric Message> $self.host SENT $self.code TO $self.nick SENT $self.message"
    end
end

/*
 * :Matt!bwctadmin@netadmin.spam.entirelyrandom.net MODE #chat + q Matt"
 */

class IrcModeMessage(raw, re, client) from IrcMessage(raw, re, client)
    nick = nil
    host = nil
    op = nil
    mode = nil
    channel = nil
    parameter = nil
    
    init
        nick = self.rawMessage[ self.re.captured( 1 ) ]
        host = self.rawMessage[ self.re.captured( 2 ) ]
        op   = self.rawMessage[ self.re.captured( 3 ) ]
        mode = self.rawMessage[ self.re.captured( 4 ) ]
        channel = self.rawMessage[ self.re.captured( 5 ) ]
        parameter = self.rawMessage[ self.re.captured( 6 ) ]
    end
end

class IrcClient( nHost, nPort, nNick, nName, nClientName, logTo, CommandLine ) from TCPSocket
    channel = nil
    host = nHost
    port = nPort
    nick = nNick
    name = nName
    clientName = nClientName
    buff = ""       // buffer
    lines = List()  // queue
    logStream = logTo
    cmd_line = CommandLine  // command line options
    
    // Use a Table to hold message patterns and associated object
    messages = Table( 
        .[ "regex"                                                          "message"        ],
        .[ Regex( ":(.*)!(.*) PRIVMSG ([^:]*) :(.*)$" )                     IrcPrivateMessage],
        .[ Regex( ":(\\S+) (\\d{3}) (\\S+) \\d*\\s?[:|=|#](.*)$" )          IrcNumericMessage],
        .[ Regex( ":(.*)!(.*) JOIN :(.*)$" )                                IrcJoinMessage   ],
        .[ Regex( ":(.*)!(.*) PART (.*) :(.*)$" )                           IrcPartMessage   ],
        .[ Regex( ":(.*)!(.*) MODE ([^ ]*) ([+-])([A-Za-z]+) ([^ ]*)?$" )   IrcModeMessage   ],
        .[ Regex( "NOTICE (\\w+) :(.*$)" )                                  IrcNoticeMessage ],
        .[ Regex( "PING :(.*)$" )                                           IrcPingMessage   ],
        .[ Regex( ":(.*)$" )                                                IrcMessage       ]
    )
    
    init
        if self.logStream == nil and self.cmd_line.log
	    // if a stream is not given, create our own
            self.generateLogFile()
        end
        
        subscribe("IrcPingMessage", self.pong)
        subscribe("IrcPrivateMessage", self)
    end
    
    function generateLogFile()
        time = CurrentTime().toString("%y-%m-%d")
        self.logStream = IOStream(@"Log-$(self.clientName)-$(time).txt")
        self.logStream.seekEnd( 0 ) // append if the file exists
        
        if self.cmd_line.verbose: > @ "Created Log File Log-$(self.clientName)-$(time).txt"
    end
    
    function connect()
        if self.cmd_line.verbose
            > "Connecting to ", self.cmd_line.host
            > "On Port ", self.cmd_line.port
        end
        
        self.TCPSocket.setTimeout( 0 )
        if self.cmd_line.log: self.log( "Connecting")
        
        self.TCPSocket.connect( self.host, toString(self.port) )
        
        while self.TCPSocket.isConnected() == false
            sleep( 0.1 ) // keep spinning until we connect
        end
        
        if self.cmd_line.log: self.log( "Connected, Logging in")
        if self.cmd_line.log: self.logStream.flush()
        
        self.TCPSocket.setTimeout( 0.1 )
        self.login()
        
        launch self.connectionHandler()
        
        if self.cmd_line.verbose: > "Connection successful"
        
        return true
    end
    
    function send(msg)
        return self.TCPSocket.send(msg + "\n\r")
    end
    
    function read()
        if self.TCPSocket.recv( self.buff, 4096) <= 0
            return false
        else
            self.buff.replace("\n\r", "\n")
            self.buff.replace("\r", "\n")
            for line in self.buff.split("\n")
                self.lines.push(line.trim())
            end
            
            return true
        end
    end
    
    function readline()
        if not self.lines.empty()
            return self.lines.popFront()
        end
        
        self.read()
        return false
    end
    
    function connectionHandler()
	    // figure message type and dispatch it
        while true
            line = self.readline()
            if line
                for p in self.messages
                    if p.regex.match( line )
                        message = p.message( line, p.regex, self )
                        
                        launch broadcast( message.name(), message )
                        
                        break
                    end
                end
            end
            
            sleep( 0.1 )
        end
    end
    
    // send message to specific user
    function sendToNick( name, msg)
        return self.send(@"PRIVMSG $name :$msg")
    end
    
    // send message to current channel
    function sendToChannel( msg )
        return self.send(@"PRIVMSG $self.channel :$msg")
    end
    
    function login()
        self.send(@"NICK :$self.nick")
        self.send(@"USER $self.nick 0 * :$self.name")
    end
    
    function pong(message)
        message.client.send( "PONG " + message.pingFrom[ 0 ] )
    end
    
    function quit(reason)
        if not reason
            reason = ""
        end
        
        self.send( "QUIT " + reason)
        
        if self.cmd_line.verbose: > "Application Quiting"
    end
    
    function join( channel )
        if self.cmd_line.verbose: > "Joining channel ", self.cmd_line.host
        
        self.channel = channel
        self.send(@"JOIN $channel")
    end
    
    function kick(channel, nick, reason)
        if not reason
            reason = ""
        end
        
        self.send(@"KICK $channel $nick :$reason")
    end
    
    function ban(channel, nick, reason)
        reason = reason ? reason : ""
        self.send(@"KICK $channel $nick :$reason")
    end
    
    function part(channel)
        self.send(@"PART $channel")
    end
    
    function mode(channelOrNick, mode, limit, user, banMask)
        limit = limit ? limit : ""
        user = user ? user : ""
        banMask = banMask ? banMask : ""
        self.send(@"MODE $channelOrNick $mode $limit $user $banMask")
    end
    
    function on_IrcPrivateMessage ( msg )
        if msg.channel == self.cmd_line.channel
            time = CurrentTime().toString("%R")
            self.log(@"($time) $msg.nick: $msg.said")
        end
    end
    
    
    function log(text, verboseTimeStamp) // write to the log file
        if self.logStream and self.cmd_line.log
            if verboseTimeStamp
                self.logStream.writeText(CurrentTime().toRFC2822 + " " + self.clientName + ": " + text + "\n")
            else
                self.logStream.writeText(text + "\n")
            end
            
        self.logStream.flush()
        
        end
    end
end
